#!/bin/bash

command -v tmux >/dev/null 2>&1 || { printf "Cockpit requires tmux but it is not installed.
Please check http://cockpit.27ae60.com/help.html for more information.
Aborting." >&2; exit 1; }

# Proccess cmd line options
while getopts ":hf:d:" opt; do
  case ${opt} in
    h )
      echo "Usage: tmx [-h] [-f format] [-d start dir] [name]"
      echo "where options include:"
      echo "  -h"
      echo "    Display this message"
      echo "  -f format"
      echo "    Format the new tmux session using the format string given"
      echo "    where <format> = \"{[<op>[<ctrl>]][{<cmd>}]}\""
      echo "      <op>:   One of \"|\" or \"_\". Splits the pane"
      echo "              horizontally or vertically respectively"
      echo "      <ctrl>: One of \"^v><\", moves the current pane"
      echo "              to the pane above, below, left or right."
      echo "      <cmd>:  Executes <cmd> in the current pane."
      echo "  -d start-dir"
      echo "    Start the new tmux session at the given start directory path"
      exit 0
      ;;
    f )
      format=$OPTARG
      ;;
    d )
      dir=$OPTARG
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      ;;
    : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      ;;
  esac
done
shift $((OPTIND -1))

# name the workspace
SESSION="Workspace"
if [ $# = 0 ]; then
	echo "No session name given, using \"Workspace\""
else
	SESSION=$1
fi

# if the session is already running, just attach to it.
tmux has-session -t $SESSION > /dev/null 2>&1
if [ $? -eq 0 ]; then
  echo "Session $SESSION already exists. Attaching."
  sleep 0.1
  sett $SESSION
  tmux -2 attach -t $SESSION
  exit 0;
fi

if [ "$format" == "" ]; then
  IFS=$'\n'
  for line in $(cat ~/bin/.tmux.formats); do
    name=$(echo "$line" | awk -F "::" '{print $1}')
    form=$(echo "$line" | awk -F "::" '{print $2}')
    d=$(echo "$line" | awk -F "::" '{print $3}')
    #name="${line%%::*}"
    #form="${line##*::}"
    if [ "$SESSION" == "$name" ]; then
      format="$form"
      dir="$d"
      echo "Retrived format specified for \"$name\""
      break
    fi
  done
  unset IFS
fi
dir="$(readlink -f "$(echo ${dir/"~"/~})")"
if [ "$dir" != "" ] && [ -d "$dir" ] ; then
  cd "$dir"
fi

# create a new session, named $SESSION, and detach from it
tmux -2 new-session -n $SESSION -d -s $SESSION

tmux set set-titles on
tmux set set-titles-string $SESSION
tmux set-option -g base-index 1
tmux set-window-option -t $SESSION -g automatic-rename off
tmux set-window-option -g pane-base-index 1

# Now populate the session with the windows you use every day
tmux new-window -t $SESSION:0 -k -n Untitled-window
if [ ! -z "$format" ]; then
  i=0
  size=${#format}
  while [ $i -lt $size ]; do
    case ${format:$i:1} in
      \| )
        tmux split-window -h -p 50
        ;;
      _ )
        tmux split-window -v -p 50
        ;;
      ^ )
        tmux select-pane -U
        ;;
      v )
        tmux select-pane -D
        ;;
      \> )
        tmux select-pane -R
        ;;
      \< )
        tmux select-pane -L
        ;;
      { )
        s=$(expr $i + 1)
        i=$(expr $i + 1)
        while [ "${format:$i:1}" != "}" ]; do
          i=$(expr $i + 1)
        done
        len=$(expr $i - $s)
        com=${format:$s:$len}
        #echo "command: \"$com\""
        tmux send-keys "$com" Enter
        ;;
      * )
        echo "Could not parse ${format:$i:1}"
        ;;
    esac
    i=$(expr $i + 1)
  done
fi

# all done. select starting window and get to work
tmux set-window-option -t $SESSION:0 automatic-rename off
tmux select-window -t $SESSION:0
tmux -2 attach -t $SESSION
