#!/bin/bash

command -v tmux >/dev/null 2>&1 || { printf "tmx requires tmux but it is not installed.
Aborting." >&2; return 1; }

local format
local dir
local SESSION

# Proccess cmd line options
while getopts ":hf:d:" opt; do
  case ${opt} in
    h )
      echo "Usage: tmx [-h] [-f format] [-d start dir] [name]"
      echo "where options include:"
      echo "  -h"
      echo "    Display this message"
      echo "  -f format"
      echo "    Format the new tmux session using the format string given"
      echo "    where <format> = \"{[<op>[<ctrl>]][{<cmd>}]}\""
      echo "      <op>:   One of \"|\" or \"_\". Splits the pane"
      echo "              horizontally or vertically respectively"
      echo "      <ctrl>: One of \"^v><\", moves the current pane"
      echo "              to the pane above, below, left or right."
      echo "      <cmd>:  Executes <cmd> in the current pane."
      echo "  -d start-dir"
      echo "    Start the new tmux session at the given start directory path"
      return 0
      ;;
    f )
      format=$OPTARG
      ;;
    d )
      dir=$OPTARG
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      ;;
    : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      ;;
  esac
done
shift $((OPTIND -1))

# name the workspace
SESSION="Workspace"
if [ $# = 0 ]; then
	echo "No session name given, using \"Workspace\""
else
	SESSION=$1
fi

if [ "$HISTFILE" != "" ]; then
  history -a
fi

# if the session is already running, just attach to it.
tmux has-session -t $SESSION > /dev/null 2>&1
if [ $? -eq 0 ]; then
  echo "Session $SESSION already exists. Attaching."
  sleep 0.1
  tmux -2 attach -t $SESSION
else
  if [ "$format" == "" ]; then
    IFS=$'\n'
    if [ ! -f ~/bin/.tmux.formats ]; then
      touch ~/bin/.tmux.formats
    fi
    for line in $(cat ~/bin/.tmux.formats); do
      local name=$(echo "$line" | awk -F "::" '{print $1}')
      local form=$(echo "$line" | awk -F "::" '{print $2}')
      local d=$(echo "$line" | awk -F "::" '{print $3}')
      #name="${line%%::*}"
      #form="${line##*::}"
      if [ "$SESSION" == "$name" ]; then
        format="$form"
        dir="$d"
        echo "Retrived format specified for \"$name\""
        break
      fi
    done
    unset IFS
  fi
  dir="$(readlink -f "$(echo ${dir/"~"/~})")"

  # create dummy session to set options if needed
  tmux list-sessions &> /dev/null
  inactive="$?"
  if [ $inactive -eq 1 ]; then
    tmux new-session -d -s dummy
    tmux set-option -g base-index 1
    tmux set-window-option -g pane-base-index 1
  fi

  # create a new session, named $SESSION, and detach from it
  tmux -2 new-session -n $SESSION -d -s $SESSION ${dir:+-c "$dir"}

  tmux set set-titles on
  tmux set set-titles-string $SESSION
  tmux set-window-option -t $SESSION -g automatic-rename off

  # kill dummy session if created
  if [ $inactive -eq 1 ]; then
    tmux kill-session -t dummy
  fi

  # Now populate the session with the windows you use every day
  if [ ! -z "$format" ]; then
    local i=0
    local size=${#format}
    while [ $i -lt $size ]; do
      case ${format:$i:1} in
        \| )
          tmux split-window ${dir:+-c "$dir"} -h -p 50
          ;;
        _ )
          tmux split-window ${dir:+-c "$dir"} -v -p 50
          ;;
        ^ )
          tmux select-pane -U
          ;;
        v )
          tmux select-pane -D
          ;;
        \> )
          tmux select-pane -R
          ;;
        \< )
          tmux select-pane -L
          ;;
        { )
          local s=$(expr $i + 1)
          i=$(expr $i + 1)
          while [ "${format:$i:1}" != "}" ]; do
            i=$(expr $i + 1)
          done
          local len=$(expr $i - $s)
          local com=${format:$s:$len}
          #echo "command: \"$com\""
          tmux send-keys "$com" Enter
          ;;
        * )
          echo "Could not parse ${format:$i:1}"
          ;;
      esac
      i=$(expr $i + 1)
    done
  fi

  # all done. select starting window and get to work
  tmux -2 attach -t $SESSION
fi
# clean up after session close (not detatch)
tmux has-session -t $SESSION > /dev/null 2>&1
if [ $? -ne 0 ]; then
  #echo "Time for clean up..."
  history -n
fi
